// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use Auth;
use Message;
use SessionFeature;
use gio;
use glib::object::IsA;
use glib::translate::*;
use soup_sys;
use std::fmt;

glib_wrapper! {
    pub struct PasswordManager(Interface<soup_sys::SoupPasswordManager>) @requires SessionFeature;

    match fn {
        get_type => || soup_sys::soup_password_manager_get_type(),
    }
}

pub const NONE_PASSWORD_MANAGER: Option<&PasswordManager> = None;

pub trait PasswordManagerExt: 'static {
    //fn get_passwords_async<P: IsA<Message>, Q: IsA<Auth>, R: IsA<gio::Cancellable>, S: FnOnce(&PasswordManager, &Message, &Auth, bool) + 'static>(&self, msg: &P, auth: &Q, retrying: bool, async_context: /*Ignored*/&glib::MainContext, cancellable: Option<&R>, callback: S);

    fn get_passwords_sync<P: IsA<Message>, Q: IsA<Auth>, R: IsA<gio::Cancellable>>(&self, msg: &P, auth: &Q, cancellable: Option<&R>);
}

impl<O: IsA<PasswordManager>> PasswordManagerExt for O {
    //fn get_passwords_async<P: IsA<Message>, Q: IsA<Auth>, R: IsA<gio::Cancellable>, S: FnOnce(&PasswordManager, &Message, &Auth, bool) + 'static>(&self, msg: &P, auth: &Q, retrying: bool, async_context: /*Ignored*/&glib::MainContext, cancellable: Option<&R>, callback: S) {
    //    unsafe { TODO: call soup_sys:soup_password_manager_get_passwords_async() }
    //}

    fn get_passwords_sync<P: IsA<Message>, Q: IsA<Auth>, R: IsA<gio::Cancellable>>(&self, msg: &P, auth: &Q, cancellable: Option<&R>) {
        unsafe {
            soup_sys::soup_password_manager_get_passwords_sync(self.as_ref().to_glib_none().0, msg.as_ref().to_glib_none().0, auth.as_ref().to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0);
        }
    }
}

impl fmt::Display for PasswordManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PasswordManager")
    }
}
