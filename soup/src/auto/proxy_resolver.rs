// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use SessionFeature;
use glib::object::IsA;
use glib::translate::*;
use soup_sys;
use std::fmt;

glib_wrapper! {
    pub struct ProxyResolver(Interface<soup_sys::SoupProxyResolver>) @requires SessionFeature;

    match fn {
        get_type => || soup_sys::soup_proxy_resolver_get_type(),
    }
}

pub const NONE_PROXY_RESOLVER: Option<&ProxyResolver> = None;

pub trait ProxyResolverExt: 'static {
    //#[cfg_attr(feature = "v2_28", deprecated)]
    //fn get_proxy_async<P: IsA<Message>, Q: IsA<gio::Cancellable>>(&self, msg: &P, async_context: /*Ignored*/&glib::MainContext, cancellable: Option<&Q>, callback: /*Unimplemented*/FnOnce(&ProxyResolver, &Message, u32, /*Ignored*/Address), user_data: /*Unimplemented*/Option<Fundamental: Pointer>);

    //#[cfg_attr(feature = "v2_28", deprecated)]
    //fn get_proxy_sync<P: IsA<Message>, Q: IsA<gio::Cancellable>>(&self, msg: &P, cancellable: Option<&Q>, addr: /*Ignored*/Address) -> u32;
}

impl<O: IsA<ProxyResolver>> ProxyResolverExt for O {
    //fn get_proxy_async<P: IsA<Message>, Q: IsA<gio::Cancellable>>(&self, msg: &P, async_context: /*Ignored*/&glib::MainContext, cancellable: Option<&Q>, callback: /*Unimplemented*/FnOnce(&ProxyResolver, &Message, u32, /*Ignored*/Address), user_data: /*Unimplemented*/Option<Fundamental: Pointer>) {
    //    unsafe { TODO: call soup_sys:soup_proxy_resolver_get_proxy_async() }
    //}

    //fn get_proxy_sync<P: IsA<Message>, Q: IsA<gio::Cancellable>>(&self, msg: &P, cancellable: Option<&Q>, addr: /*Ignored*/Address) -> u32 {
    //    unsafe { TODO: call soup_sys:soup_proxy_resolver_get_proxy_sync() }
    //}
}

impl fmt::Display for ProxyResolver {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ProxyResolver")
    }
}
