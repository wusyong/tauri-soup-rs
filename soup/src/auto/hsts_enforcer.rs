// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::HSTSPolicy;
use crate::Message;
use crate::SessionFeature;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "SoupHSTSEnforcer")]
    pub struct HSTSEnforcer(Object<ffi::SoupHSTSEnforcer, ffi::SoupHSTSEnforcerClass>) @implements SessionFeature;

    match fn {
        type_ => || ffi::soup_hsts_enforcer_get_type(),
    }
}

impl HSTSEnforcer {
    #[doc(alias = "soup_hsts_enforcer_new")]
    pub fn new() -> HSTSEnforcer {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::soup_hsts_enforcer_new())
        }
    }
}

#[cfg(any(feature = "v2_68", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v2_68")))]
impl Default for HSTSEnforcer {
    fn default() -> Self {
        Self::new()
    }
}

pub const NONE_HSTS_ENFORCER: Option<&HSTSEnforcer> = None;

pub trait HSTSEnforcerExt: 'static {
    #[doc(alias = "soup_hsts_enforcer_get_domains")]
    #[doc(alias = "get_domains")]
    fn domains(&self, session_policies: bool) -> Vec<glib::GString>;

    #[doc(alias = "soup_hsts_enforcer_get_policies")]
    #[doc(alias = "get_policies")]
    fn policies(&self, session_policies: bool) -> Vec<HSTSPolicy>;

    #[doc(alias = "soup_hsts_enforcer_has_valid_policy")]
    fn has_valid_policy(&self, domain: &str) -> bool;

    #[doc(alias = "soup_hsts_enforcer_is_persistent")]
    fn is_persistent(&self) -> bool;

    #[doc(alias = "soup_hsts_enforcer_set_policy")]
    fn set_policy(&self, policy: &mut HSTSPolicy);

    #[doc(alias = "soup_hsts_enforcer_set_session_policy")]
    fn set_session_policy(&self, domain: &str, include_subdomains: bool);

    #[doc(alias = "changed")]
    fn connect_changed<F: Fn(&Self, &HSTSPolicy, &HSTSPolicy) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "hsts-enforced")]
    fn connect_hsts_enforced<F: Fn(&Self, &Message) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<HSTSEnforcer>> HSTSEnforcerExt for O {
    fn domains(&self, session_policies: bool) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::soup_hsts_enforcer_get_domains(self.as_ref().to_glib_none().0, session_policies.into_glib()))
        }
    }

    fn policies(&self, session_policies: bool) -> Vec<HSTSPolicy> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::soup_hsts_enforcer_get_policies(self.as_ref().to_glib_none().0, session_policies.into_glib()))
        }
    }

    fn has_valid_policy(&self, domain: &str) -> bool {
        unsafe {
            from_glib(ffi::soup_hsts_enforcer_has_valid_policy(self.as_ref().to_glib_none().0, domain.to_glib_none().0))
        }
    }

    fn is_persistent(&self) -> bool {
        unsafe {
            from_glib(ffi::soup_hsts_enforcer_is_persistent(self.as_ref().to_glib_none().0))
        }
    }

    fn set_policy(&self, policy: &mut HSTSPolicy) {
        unsafe {
            ffi::soup_hsts_enforcer_set_policy(self.as_ref().to_glib_none().0, policy.to_glib_none_mut().0);
        }
    }

    fn set_session_policy(&self, domain: &str, include_subdomains: bool) {
        unsafe {
            ffi::soup_hsts_enforcer_set_session_policy(self.as_ref().to_glib_none().0, domain.to_glib_none().0, include_subdomains.into_glib());
        }
    }

    fn connect_changed<F: Fn(&Self, &HSTSPolicy, &HSTSPolicy) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<P: IsA<HSTSEnforcer>, F: Fn(&P, &HSTSPolicy, &HSTSPolicy) + 'static>(this: *mut ffi::SoupHSTSEnforcer, old_policy: *mut ffi::SoupHSTSPolicy, new_policy: *mut ffi::SoupHSTSPolicy, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(HSTSEnforcer::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(old_policy), &from_glib_borrow(new_policy))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_hsts_enforced<F: Fn(&Self, &Message) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn hsts_enforced_trampoline<P: IsA<HSTSEnforcer>, F: Fn(&P, &Message) + 'static>(this: *mut ffi::SoupHSTSEnforcer, message: *mut ffi::SoupMessage, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(HSTSEnforcer::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(message))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"hsts-enforced\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(hsts_enforced_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for HSTSEnforcer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("HSTSEnforcer")
    }
}
